{
  "$schema": "https://json-schema.org/draft-04/schema#",
  "title": "JSON schema for web-types. Preview of version 2.0 of the standard.",
  "type": "object",
  "properties": {
    "$schema": {
      "type": "string"
    },
    "framework": {
      "description": "Framework, for which the components are provided by the library",
      "type": "string"
    },
    "name": {
      "description": "Name of the library",
      "type": "string"
    },
    "version": {
      "description": "Version of the library, for which web-types are provided",
      "type": "string"
    },
    "js-types-syntax": {
      "$ref": "#/definitions/js-types-syntax"
    },
    "description-markup": {
      "$ref": "#/definitions/description-markup"
    },
    "framework-config": {
      "$ref": "#/definitions/framework-config"
    },
    "default-icon": {
      "$ref": "#/definitions/icon"
    },
    "contributions": {
      "type": "object",
      "properties": {
        "html": {
          "$ref": "#/definitions/html"
        },
        "css": {
          "$ref": "#/definitions/css"
        },
        "js": {
          "$ref": "#/definitions/js"
        }
      },
      "additionalProperties": false
    }
  },
  "required": [
    "name",
    "version"
  ],
  "additionalProperties": false,
  "definitions": {
    "js-types-syntax": {
      "description": "Language in which JavaScript objects types are specified.",
      "type": "string",
      "enum": [
        "typescript"
      ]
    },
    "description-markup": {
      "description": "Markup language in which descriptions are formatted",
      "type": "string",
      "default": "none",
      "enum": [
        "html",
        "markdown",
        "none"
      ]
    },
    "framework-config": {
      "type": "object",
      "properties": {
        "enable-when": {
          "description": "Specify rules for enabling web framework support.",
          "$ref": "#/definitions/enablement-rules"
        },
        "disable-when": {
          "description": "Specify rules for disabling web framework support. These rules take precedence over enable-when rules.",
          "$ref": "#/definitions/disablement-rules"
        },
        "canonical-names": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/name-converter"
          }
        },
        "name-variants": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/name-converters"
          }
        }
      },
      "additionalProperties": false
    },
    "enablement-rules": {
      "type": "object",
      "properties": {
        "node-packages": {
          "description": "Node.js package names, which enable framework support within the folder containing the package.json.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "script-url-patterns": {
          "description": "RegExps to match script URLs, which enable framework support within a particular HTML.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/pattern"
          }
        },
        "file-extensions": {
          "description": "Extensions of files, which should have the framework support enabled",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "file-name-patterns": {
          "description": "RegExp patterns to match file names, which should have the framework support enabled",
          "type": "array",
          "items": {
            "$ref": "#/definitions/pattern"
          }
        },
        "ide-libraries": {
          "description": "Global JavaScript libraries names enabled within the IDE, which enable framework support in the whole project",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "disablement-rules": {
      "type": "object",
      "properties": {
        "file-extensions": {
          "description": "Extensions of files, which should have the framework support disabled",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "file-name-patterns": {
          "description": "RegExp patterns to match file names, which should have the framework support disabled",
          "type": "array",
          "items": {
            "$ref": "#/definitions/pattern"
          }
        }
      },
      "additionalProperties": false
    },
    "name-converters": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/name-converter"
      }
    },
    "name-converter": {
      "type": "string",
      "enum": [
        "as-is",
        "PascalCase",
        "camelCase",
        "lowercase",
        "UPPERCASE",
        "kebab-case",
        "snake_case"
      ]
    },
    "icon": {
      "description": "Relative path to icon",
      "type": "string"
    },
    "generic-contributions": {
      "java-lenient-deserialize": true,
      "oneOf": [
        {
          "type": "array",
          "items": {
            "$ref": "#/definitions/generic-contribution-or-property"
          }
        },
        {
          "$ref": "#/definitions/generic-contribution-or-property"
        }
      ]
    },
    "generic-contribution-or-property": {
      "oneOf": [
        {
          "type": "string"
        },
        {
          "type": "number"
        },
        {
          "type": "boolean"
        },
        {
          "$ref": "#/definitions/generic-contribution"
        }
      ]
    },
    "generic-contributions-host": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/generic-contributions"
      }
    },
    "base-contribution": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/generic-contributions-host"
        }
      ],
      "properties": {
        "name": {
          "$ref": "#/definitions/name"
        },
        "description": {
          "$ref": "#/definitions/description"
        },
        "doc-url": {
          "$ref": "#/definitions/doc-url"
        },
        "icon": {
          "$ref": "#/definitions/icon"
        },
        "source": {
          "$ref": "#/definitions/source"
        },
        "deprecated": {
          "$ref": "#/definitions/deprecated"
        },
        "experimental": {
          "$ref": "#/definitions/experimental"
        },
        "priority": {
          "$ref": "#/definitions/priority"
        },
        "proximity": {
          "$ref": "#/definitions/proximity"
        },
        "virtual": {
          "$ref": "#/definitions/virtual"
        },
        "abstract": {
          "$ref": "#/definitions/abstract"
        },
        "extension": {
          "$ref": "#/definitions/extension"
        },
        "extends": {
          "$ref": "#/definitions/extends"
        },
        "pattern": {
          "$ref": "#/definitions/name-pattern-root"
        },
        "html": {
          "$ref": "#/definitions/html"
        },
        "css": {
          "$ref": "#/definitions/css"
        },
        "js": {
          "$ref": "#/definitions/js"
        },
        "attributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/html-attribute"
          }
        }
      },
      "additionalProperties": false
    },
    "typed-contribution": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/base-contribution"
        }
      ],
      "properties": {
        "type": {
          "$ref": "#/definitions/type-list"
        }
      },
      "additionalProperties": false
    },
    "generic-contribution": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/typed-contribution"
        }
      ],
      "properties": {
        "default": {
          "$ref": "#/definitions/default"
        },
        "required": {
          "$ref": "#/definitions/required"
        },
        "attribute-value": {
          "$ref": "#/definitions/html-attribute-value"
        },
        "formal-syntax": {
          "$ref": "#/definitions/formal-syntax"
        }
      },
      "additionalProperties": false
    },
    "type-list": {
      "description": "Specify type according to selected language for type syntax. The type can be specified by a string expression, an object with list of imports and an expression, or an array of possible types.",
      "oneOf": [
        {
          "$ref": "#/definitions/type"
        },
        {
          "type": "array",
          "items": {
            "$ref": "#/definitions/type"
          }
        }
      ]
    },
    "type": {
      "oneOf": [
        {
          "type": "string"
        },
        {
          "$ref": "#/definitions/type-reference"
        }
      ]
    },
    "type-reference": {
      "type": "object",
      "properties": {
        "module": {
          "description": "Name of module, which exports the type. May be omitted, in which case it's assumed to be the name of the library.",
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "additionalProperties": false
    },
    "html-value-type": {
      "oneOf": [
        {
          "type": "string",
          "description": "Provide one of special attribute value types:  \"enum\", \"of-match\", or a simple JavaScript type according to the specified type format."
        },
        {
          "$ref": "#/definitions/type-reference"
        },
        {
          "type": "array",
          "items": {
            "$ref": "#/definitions/type"
          }
        }
      ]
    },
    "formal-syntax": {
      "oneOf": [
        {
          "type": "string"
        },
        {
          "$ref": "#/definitions/complex-formal-syntax"
        }
      ],
      "additionalProperties": false
    },
    "complex-formal-syntax": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string"
        },
        "definitions": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false,
      "required": [
        "value",
        "definitions"
      ]
    },
    "source": {
      "description": "Allows to specify the source of the entity. For Vue.js component this may be for instance a class.",
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "file": {
              "description": "Path to the file, relative to the web-types JSON.",
              "type": "string"
            },
            "offset": {
              "description": "Offset in the file under which the source symbol, like class name, is located.",
              "type": "integer"
            }
          },
          "required": [
            "file",
            "offset"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "module": {
              "description": "Name of module, which exports the symbol. May be omitted, in which case it's assumed to be the name of the library.",
              "type": "string"
            },
            "symbol": {
              "description": "Name of the exported symbol.",
              "type": "string"
            }
          },
          "required": [
            "symbol"
          ],
          "additionalProperties": false
        }
      ],
      "additionalProperties": false
    },
    "name": {
      "type": "string"
    },
    "aliases": {
      "description": "List of symbol aliases",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "description": {
      "description": "Short description to be rendered in documentation popup. It will be rendered according to description-markup setting.",
      "type": "string"
    },
    "doc-url": {
      "description": "Link to online documentation.",
      "type": "string"
    },
    "virtual": {
      "type": "boolean"
    },
    "abstract": {
      "type": "boolean"
    },
    "extension": {
      "type": "boolean"
    },
    "priority": {
      "type": "string",
      "enum": [
        "lowest",
        "low",
        "normal",
        "high",
        "highest"
      ]
    },
    "proximity": {
      "type": "integer"
    },
    "expression-parser": {
      "type": "string"
    },
    "selector": {
      "type": "string"
    },
    "name-pattern-root": {
      "oneOf": [
        {
          "type": "string"
        },
        {
          "$ref": "#/definitions/name-pattern"
        }
      ]
    },
    "name-pattern": {
      "type": "object",
      "oneOf": [
        {
          "properties": {
            "regex": {
              "type": "string"
            },
            "case-sensitive": {
              "type": "boolean",
              "default": true
            }
          },
          "required": [
            "regex"
          ],
          "additionalProperties": false
        },
        {
          "properties": {
            "required": {
              "$ref": "#/definitions/required"
            },
            "unique": {
              "type": "boolean"
            },
            "repeat": {
              "type": "boolean"
            },
            "template": {
              "$ref": "#/definitions/name-pattern-template"
            },
            "or": {
              "$ref": "#/definitions/name-pattern-template"
            },
            "delegate": {
              "$ref": "#/definitions/reference"
            },
            "deprecated": {
              "$ref": "#/definitions/deprecated"
            },
            "priority": {
              "$ref": "#/definitions/priority"
            },
            "proximity": {
              "$ref": "#/definitions/proximity"
            },
            "items": {
              "$ref": "#/definitions/list-reference"
            }
          },
          "additionalProperties": false
        }
      ],
      "additionalProperties": false
    },
    "name-pattern-template": {
      "type": "array",
      "minItems": 1,
      "items": {
        "oneOf": [
          {
            "type": "string"
          },
          {
            "$ref": "#/definitions/name-pattern"
          },
          {
            "$ref": "#/definitions/name-pattern-template"
          }
        ]
      },
      "additionalItems": false
    },
    "list-reference": {
      "description": "A reference to an element in web-types model.",
      "oneOf": [
        {
          "type": "array",
          "items": {
            "$ref": "#/definitions/reference"
          }
        },
        {
          "$ref": "#/definitions/reference"
        }
      ]
    },
    "reference": {
      "description": "A reference to an element in web-types model.",
      "oneOf": [
        {
          "type": "string"
        },
        {
          "$ref": "#/definitions/reference-with-props"
        }
      ]
    },
    "reference-with-props": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string"
        },
        "includeVirtual": {
          "type": "boolean",
          "default": true
        },
        "includeAbstract": {
          "type": "boolean"
        },
        "filter": {
          "type": "string"
        }
      },
      "required": [
        "path"
      ]
    },
    "extends": {
      "$ref": "#/definitions/reference"
    },
    "default": {
      "type": "string"
    },
    "required": {
      "type": "boolean"
    },
    "deprecated": {
      "type": "boolean",
      "default": false
    },
    "experimental": {
      "type": "boolean",
      "default": false
    },
    "pattern": {
      "description": "A RegEx pattern to match whole content. Syntax should work with at least ECMA, Java and Python implementations.",
      "oneOf": [
        {
          "type": "string"
        },
        {
          "type": "object",
          "properties": {
            "regex": {
              "type": "string"
            },
            "case-sensitive": {
              "type": "boolean",
              "default": true
            }
          }
        }
      ]
    },
    "html": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/generic-contributions-host"
        }
      ],
      "properties": {
        "types-syntax": {
          "$ref": "#/definitions/deprecated-types-syntax"
        },
        "description-markup": {
          "$ref": "#/definitions/deprecated-description-markup"
        },
        "elements": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/html-element"
          }
        },
        "tags": {
          "type": "array",
          "description": "Deprecated, use `elements` property.",
          "deprecationMessage": "Use `elements` property.",
          "items": {
            "$ref": "#/definitions/html-element"
          }
        },
        "attributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/html-attribute"
          }
        }
      },
      "additionalProperties": false
    },
    "html-element": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/base-contribution"
        }
      ],
      "additionalProperties": false
    },
    "html-attribute": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/base-contribution"
        }
      ],
      "properties": {
        "value": {
          "$ref": "#/definitions/html-attribute-value"
        },
        "default": {
          "type": "string"
        },
        "required": {
          "$ref": "#/definitions/required"
        },
        "vue-argument": {
          "$ref": "#/definitions/deprecated-html-attribute-vue-argument"
        },
        "vue-modifiers": {
          "description": "Deprecated vue-specific property - contribute Vue directives to /contributions/html/vue-directives",
          "deprecationMessage": "Contribute Vue directives to /contributions/html/vue-directives",
          "type": "array",
          "items": {
            "$ref": "#/definitions/deprecated-html-attribute-vue-modifier"
          }
        }
      },
      "additionalProperties": false
    },
    "html-element-vue-model": {
      "type": "object",
      "properties": {
        "prop": {
          "default": "value",
          "type": "string"
        },
        "event": {
          "default": "input",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "html-attribute-value": {
      "type": "object",
      "properties": {
        "kind": {
          "type": "string",
          "enum": [
            "no-value",
            "plain",
            "expression"
          ]
        },
        "type": {
          "$ref": "#/definitions/html-value-type"
        },
        "required": {
          "type": "boolean"
        },
        "default": {
          "type": "string"
        },
        "parser": {
          "$ref": "#/definitions/expression-parser"
        }
      },
      "additionalProperties": false
    },
    "css": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/generic-contributions-host"
        }
      ],
      "properties": {
        "properties": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/css-property"
          }
        },
        "pseudo-elements": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/css-generic-item"
          }
        },
        "pseudo-classes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/css-generic-item"
          }
        },
        "functions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/css-generic-item"
          }
        },
        "classes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/css-generic-item"
          }
        }
      },
      "additionalProperties": false
    },
    "css-property": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/base-contribution"
        }
      ],
      "properties": {
        "formal-syntax": {
          "$ref": "#/definitions/formal-syntax"
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "css-generic-item": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/base-contribution"
        }
      ],
      "additionalProperties": false
    },
    "js": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/generic-contributions-host"
        }
      ],
      "additionalProperties": false
    },
    "deprecated-types-syntax": {
      "oneOf": [
        {
          "$ref": "#/definitions/js-types-syntax"
        }
      ],
      "description": "Deprecated, use top-level js-types-syntax property.",
      "deprecationMessage": "Use top-level js-types-syntax property."
    },
    "deprecated-description-markup": {
      "description": "Deprecated, use top-level property.",
      "deprecationMessage": "Use top-level property.",
      "oneOf": [
        {
          "$ref": "#/definitions/description-markup"
        }
      ]
    },
    "deprecated-html-attribute-vue-argument": {
      "type": "object",
      "description": "Deprecated vue-specific property - contribute Vue directives to /contributions/html/vue-directives",
      "deprecationMessage": "Contribute Vue directives to /contributions/html/vue-directives",
      "properties": {
        "pattern": {
          "$ref": "#/definitions/name-pattern-root"
        },
        "description": {
          "$ref": "#/definitions/description"
        },
        "doc-url": {
          "$ref": "#/definitions/doc-url"
        },
        "required": {
          "description": "Whether directive requires an argument",
          "type": "boolean",
          "default": false
        }
      },
      "additionalProperties": false
    },
    "deprecated-html-attribute-vue-modifier": {
      "type": "object",
      "properties": {
        "name": {
          "$ref": "#/definitions/name"
        },
        "pattern": {
          "$ref": "#/definitions/name-pattern-root"
        },
        "description": {
          "$ref": "#/definitions/description"
        },
        "doc-url": {
          "$ref": "#/definitions/doc-url"
        }
      },
      "required": [
        "name"
      ],
      "additionalProperties": false
    }
  }
}
